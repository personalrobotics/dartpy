#include <dartpy/pointers.h>
#include <dartpy/template_registry.h>
#include <dart/dart.hpp>
#include <dart/collision/bullet/bullet.hpp>
#include <dart/optimizer/optimizer.hpp>
#include <dart/optimizer/nlopt/nlopt.hpp>
#include <dart/planning/planning.hpp>
#include <dart/utils/utils.hpp>
#include <dart/utils/urdf/urdf.hpp>
#include <dart/gui/gui.hpp>

/* precontent */
#include <boost/python.hpp>
#include <cmath>

namespace {



} // namespace

void _ZN4dart8dynamics8SkeletonE()
{
::boost::python::object parent_object(::boost::python::scope().attr("dynamics"));
::boost::python::scope parent_scope(parent_object);

::boost::python::class_<dart::dynamics::Skeleton, ::boost::noncopyable, dart::dynamics::SkeletonPtr, ::boost::python::bases<dart::common::VersionCounter, dart::dynamics::MetaSkeleton > >("Skeleton", boost::python::no_init)
.def("getPtr", [](dart::dynamics::Skeleton *self) -> dart::dynamics::SkeletonPtr { return self->getPtr(); })
.def("getSkeleton", [](dart::dynamics::Skeleton *self) -> dart::dynamics::SkeletonPtr { return self->getSkeleton(); })
.def("clone", [](const dart::dynamics::Skeleton *self) -> dart::dynamics::SkeletonPtr { return self->clone(); })
.def("clone", [](const dart::dynamics::Skeleton *self, const std::string & cloneName) -> dart::dynamics::SkeletonPtr { return self->clone(cloneName); }, (::boost::python::arg("cloneName")))
.def("setConfiguration", [](dart::dynamics::Skeleton *self, const dart::dynamics::Skeleton::Configuration & configuration) -> void { return self->setConfiguration(configuration); }, (::boost::python::arg("configuration")))
.def("getConfiguration", [](const dart::dynamics::Skeleton *self) -> dart::dynamics::Skeleton::Configuration { return self->getConfiguration(); })
.def("getConfiguration", [](const dart::dynamics::Skeleton *self, int flags) -> dart::dynamics::Skeleton::Configuration { return self->getConfiguration(flags); }, (::boost::python::arg("flags")))
.def("getConfiguration", [](const dart::dynamics::Skeleton *self, const std::vector<std::size_t> & indices) -> dart::dynamics::Skeleton::Configuration { return self->getConfiguration(indices); }, (::boost::python::arg("indices")))
.def("getConfiguration", [](const dart::dynamics::Skeleton *self, const std::vector<std::size_t> & indices, int flags) -> dart::dynamics::Skeleton::Configuration { return self->getConfiguration(indices, flags); }, (::boost::python::arg("indices"), ::boost::python::arg("flags")))
.def("setState", [](dart::dynamics::Skeleton *self, const dart::dynamics::Skeleton::State & state) -> void { return self->setState(state); }, (::boost::python::arg("state")))
.def("getState", [](const dart::dynamics::Skeleton *self) -> dart::dynamics::Skeleton::State { return self->getState(); })
.def("setProperties", [](dart::dynamics::Skeleton *self, const dart::dynamics::Skeleton::Properties & properties) -> void { return self->setProperties(properties); }, (::boost::python::arg("properties")))
.def("getProperties", [](const dart::dynamics::Skeleton *self) -> dart::dynamics::Skeleton::Properties { return self->getProperties(); })
.def("setProperties", [](dart::dynamics::Skeleton *self, const dart::dynamics::Skeleton::AspectProperties & properties) -> void { return self->setProperties(properties); }, (::boost::python::arg("properties")))
.def("getSkeletonProperties", [](const dart::dynamics::Skeleton *self) -> const dart::dynamics::Skeleton::AspectProperties & { return self->getSkeletonProperties(); }, ::boost::python::return_value_policy<boost::python::copy_const_reference >())
.def("setAspectProperties", [](dart::dynamics::Skeleton *self, const dart::dynamics::Skeleton::AspectProperties & properties) -> void { return self->setAspectProperties(properties); }, (::boost::python::arg("properties")))
.def("setName", [](dart::dynamics::Skeleton *self, const std::string & _name) -> const std::string & { return self->setName(_name); }, ::boost::python::return_value_policy<boost::python::copy_const_reference >(), (::boost::python::arg("_name")))
.def("getName", [](const dart::dynamics::Skeleton *self) -> const std::string & { return self->getName(); }, ::boost::python::return_value_policy<boost::python::copy_const_reference >())
.def("enableSelfCollision", [](dart::dynamics::Skeleton *self) -> void { return self->enableSelfCollision(); })
.def("enableSelfCollision", [](dart::dynamics::Skeleton *self, bool enableAdjacentBodyCheck) -> void { return self->enableSelfCollision(enableAdjacentBodyCheck); }, (::boost::python::arg("enableAdjacentBodyCheck")))
.def("disableSelfCollision", [](dart::dynamics::Skeleton *self) -> void { return self->disableSelfCollision(); })
.def("setSelfCollisionCheck", [](dart::dynamics::Skeleton *self, bool enable) -> void { return self->setSelfCollisionCheck(enable); }, (::boost::python::arg("enable")))
.def("getSelfCollisionCheck", [](const dart::dynamics::Skeleton *self) -> bool { return self->getSelfCollisionCheck(); })
.def("enableSelfCollisionCheck", [](dart::dynamics::Skeleton *self) -> void { return self->enableSelfCollisionCheck(); })
.def("disableSelfCollisionCheck", [](dart::dynamics::Skeleton *self) -> void { return self->disableSelfCollisionCheck(); })
.def("isEnabledSelfCollisionCheck", [](const dart::dynamics::Skeleton *self) -> bool { return self->isEnabledSelfCollisionCheck(); })
.def("setAdjacentBodyCheck", [](dart::dynamics::Skeleton *self, bool enable) -> void { return self->setAdjacentBodyCheck(enable); }, (::boost::python::arg("enable")))
.def("getAdjacentBodyCheck", [](const dart::dynamics::Skeleton *self) -> bool { return self->getAdjacentBodyCheck(); })
.def("enableAdjacentBodyCheck", [](dart::dynamics::Skeleton *self) -> void { return self->enableAdjacentBodyCheck(); })
.def("disableAdjacentBodyCheck", [](dart::dynamics::Skeleton *self) -> void { return self->disableAdjacentBodyCheck(); })
.def("isEnabledAdjacentBodyCheck", [](const dart::dynamics::Skeleton *self) -> bool { return self->isEnabledAdjacentBodyCheck(); })
.def("setMobile", [](dart::dynamics::Skeleton *self, bool _isMobile) -> void { return self->setMobile(_isMobile); }, (::boost::python::arg("_isMobile")))
.def("isMobile", [](const dart::dynamics::Skeleton *self) -> bool { return self->isMobile(); })
.def("setTimeStep", [](dart::dynamics::Skeleton *self, double _timeStep) -> void { return self->setTimeStep(_timeStep); }, (::boost::python::arg("_timeStep")))
.def("getTimeStep", [](const dart::dynamics::Skeleton *self) -> double { return self->getTimeStep(); })
.def("setGravity", [](dart::dynamics::Skeleton *self, const Eigen::Vector3d & _gravity) -> void { return self->setGravity(_gravity); }, (::boost::python::arg("_gravity")))
.def("getGravity", [](const dart::dynamics::Skeleton *self) -> const Eigen::Vector3d & { return self->getGravity(); }, ::boost::python::return_value_policy<boost::python::copy_const_reference >())
.def("getNumBodyNodes", [](const dart::dynamics::Skeleton *self) -> std::size_t { return self->getNumBodyNodes(); })
.def("getNumRigidBodyNodes", [](const dart::dynamics::Skeleton *self) -> std::size_t { return self->getNumRigidBodyNodes(); })
.def("getNumSoftBodyNodes", [](const dart::dynamics::Skeleton *self) -> std::size_t { return self->getNumSoftBodyNodes(); })
.def("getNumTrees", [](const dart::dynamics::Skeleton *self) -> std::size_t { return self->getNumTrees(); })
.def("getRootBodyNode", [](dart::dynamics::Skeleton *self) -> dart::dynamics::BodyNode * { return self->getRootBodyNode(); }, ::boost::python::return_value_policy<boost::python::return_by_smart_ptr<dart::dynamics::BodyNodePtr> >())
.def("getRootBodyNode", [](dart::dynamics::Skeleton *self, std::size_t _treeIdx) -> dart::dynamics::BodyNode * { return self->getRootBodyNode(_treeIdx); }, ::boost::python::return_value_policy<boost::python::return_by_smart_ptr<dart::dynamics::BodyNodePtr> >(), (::boost::python::arg("_treeIdx")))
.def("getRootJoint", [](dart::dynamics::Skeleton *self) -> dart::dynamics::Joint * { return self->getRootJoint(); }, ::boost::python::return_value_policy<boost::python::return_by_smart_ptr<dart::dynamics::JointPtr> >())
.def("getRootJoint", [](dart::dynamics::Skeleton *self, std::size_t treeIdx) -> dart::dynamics::Joint * { return self->getRootJoint(treeIdx); }, ::boost::python::return_value_policy<boost::python::return_by_smart_ptr<dart::dynamics::JointPtr> >(), (::boost::python::arg("treeIdx")))
.def("getBodyNode", [](dart::dynamics::Skeleton *self, std::size_t _idx) -> dart::dynamics::BodyNode * { return self->getBodyNode(_idx); }, ::boost::python::return_value_policy<boost::python::return_by_smart_ptr<dart::dynamics::BodyNodePtr> >(), (::boost::python::arg("_idx")))
.def("getSoftBodyNode", [](dart::dynamics::Skeleton *self, std::size_t _idx) -> dart::dynamics::SoftBodyNode * { return self->getSoftBodyNode(_idx); }, ::boost::python::return_value_policy<boost::python::return_by_smart_ptr<dart::dynamics::SoftBodyNodePtr> >(), (::boost::python::arg("_idx")))
.def("getBodyNode", [](dart::dynamics::Skeleton *self, const std::string & name) -> dart::dynamics::BodyNode * { return self->getBodyNode(name); }, ::boost::python::return_value_policy<boost::python::return_by_smart_ptr<dart::dynamics::BodyNodePtr> >(), (::boost::python::arg("name")))
.def("getSoftBodyNode", [](dart::dynamics::Skeleton *self, const std::string & _name) -> dart::dynamics::SoftBodyNode * { return self->getSoftBodyNode(_name); }, ::boost::python::return_value_policy<boost::python::return_by_smart_ptr<dart::dynamics::SoftBodyNodePtr> >(), (::boost::python::arg("_name")))
.def("getBodyNodes", [](dart::dynamics::Skeleton *self) -> const std::vector<dart::dynamics::BodyNode *> & { return self->getBodyNodes(); }, ::boost::python::return_value_policy<boost::python::copy_const_reference >())
.def("getBodyNodes", [](dart::dynamics::Skeleton *self, const std::string & name) -> std::vector<dart::dynamics::BodyNode *> { return self->getBodyNodes(name); }, (::boost::python::arg("name")))
.def("getIndexOf", [](const dart::dynamics::Skeleton *self, const dart::dynamics::BodyNode * _bn) -> std::size_t { return self->getIndexOf(_bn); }, (::boost::python::arg("_bn")))
.def("getIndexOf", [](const dart::dynamics::Skeleton *self, const dart::dynamics::BodyNode * _bn, bool _warning) -> std::size_t { return self->getIndexOf(_bn, _warning); }, (::boost::python::arg("_bn"), ::boost::python::arg("_warning")))
.def("getTreeBodyNodes", [](dart::dynamics::Skeleton *self, std::size_t _treeIdx) -> const std::vector<dart::dynamics::BodyNode *> & { return self->getTreeBodyNodes(_treeIdx); }, ::boost::python::return_value_policy<boost::python::copy_const_reference >(), (::boost::python::arg("_treeIdx")))
.def("getNumJoints", [](const dart::dynamics::Skeleton *self) -> std::size_t { return self->getNumJoints(); })
.def("getJoint", [](dart::dynamics::Skeleton *self, std::size_t _idx) -> dart::dynamics::Joint * { return self->getJoint(_idx); }, ::boost::python::return_value_policy<boost::python::return_by_smart_ptr<dart::dynamics::JointPtr> >(), (::boost::python::arg("_idx")))
.def("getJoint", [](dart::dynamics::Skeleton *self, const std::string & name) -> dart::dynamics::Joint * { return self->getJoint(name); }, ::boost::python::return_value_policy<boost::python::return_by_smart_ptr<dart::dynamics::JointPtr> >(), (::boost::python::arg("name")))
.def("getJoints", [](dart::dynamics::Skeleton *self) -> std::vector<dart::dynamics::Joint *> { return self->getJoints(); })
.def("getJoints", [](const dart::dynamics::Skeleton *self) -> std::vector<const dart::dynamics::Joint *> { return self->getJoints(); })
.def("getJoints", [](dart::dynamics::Skeleton *self, const std::string & name) -> std::vector<dart::dynamics::Joint *> { return self->getJoints(name); }, (::boost::python::arg("name")))
.def("getJoints", [](const dart::dynamics::Skeleton *self, const std::string & name) -> std::vector<const dart::dynamics::Joint *> { return self->getJoints(name); }, (::boost::python::arg("name")))
.def("getIndexOf", [](const dart::dynamics::Skeleton *self, const dart::dynamics::Joint * _joint) -> std::size_t { return self->getIndexOf(_joint); }, (::boost::python::arg("_joint")))
.def("getIndexOf", [](const dart::dynamics::Skeleton *self, const dart::dynamics::Joint * _joint, bool _warning) -> std::size_t { return self->getIndexOf(_joint, _warning); }, (::boost::python::arg("_joint"), ::boost::python::arg("_warning")))
.def("getNumDofs", [](const dart::dynamics::Skeleton *self) -> std::size_t { return self->getNumDofs(); })
.def("getDof", [](dart::dynamics::Skeleton *self, std::size_t _idx) -> dart::dynamics::DegreeOfFreedom * { return self->getDof(_idx); }, ::boost::python::return_value_policy<boost::python::return_by_smart_ptr<dart::dynamics::DegreeOfFreedomPtr> >(), (::boost::python::arg("_idx")))
.def("getDof", [](dart::dynamics::Skeleton *self, const std::string & _name) -> dart::dynamics::DegreeOfFreedom * { return self->getDof(_name); }, ::boost::python::return_value_policy<boost::python::return_by_smart_ptr<dart::dynamics::DegreeOfFreedomPtr> >(), (::boost::python::arg("_name")))
.def("getDofs", [](dart::dynamics::Skeleton *self) -> const std::vector<dart::dynamics::DegreeOfFreedom *> & { return self->getDofs(); }, ::boost::python::return_value_policy<boost::python::copy_const_reference >())
.def("getDofs", [](const dart::dynamics::Skeleton *self) -> std::vector<const dart::dynamics::DegreeOfFreedom *> { return self->getDofs(); })
.def("getIndexOf", [](const dart::dynamics::Skeleton *self, const dart::dynamics::DegreeOfFreedom * _dof) -> std::size_t { return self->getIndexOf(_dof); }, (::boost::python::arg("_dof")))
.def("getIndexOf", [](const dart::dynamics::Skeleton *self, const dart::dynamics::DegreeOfFreedom * _dof, bool _warning) -> std::size_t { return self->getIndexOf(_dof, _warning); }, (::boost::python::arg("_dof"), ::boost::python::arg("_warning")))
.def("getTreeDofs", [](dart::dynamics::Skeleton *self, std::size_t _treeIdx) -> const std::vector<dart::dynamics::DegreeOfFreedom *> & { return self->getTreeDofs(_treeIdx); }, ::boost::python::return_value_policy<boost::python::copy_const_reference >(), (::boost::python::arg("_treeIdx")))
.def("checkIndexingConsistency", [](const dart::dynamics::Skeleton *self) -> bool { return self->checkIndexingConsistency(); })
.def("getIK", [](dart::dynamics::Skeleton *self) -> const std::shared_ptr<dart::dynamics::WholeBodyIK> & { return self->getIK(); }, ::boost::python::return_value_policy<boost::python::copy_const_reference >())
.def("getIK", [](dart::dynamics::Skeleton *self, bool _createIfNull) -> const std::shared_ptr<dart::dynamics::WholeBodyIK> & { return self->getIK(_createIfNull); }, ::boost::python::return_value_policy<boost::python::copy_const_reference >(), (::boost::python::arg("_createIfNull")))
.def("getOrCreateIK", [](dart::dynamics::Skeleton *self) -> const std::shared_ptr<dart::dynamics::WholeBodyIK> & { return self->getOrCreateIK(); }, ::boost::python::return_value_policy<boost::python::copy_const_reference >())
.def("getIK", [](const dart::dynamics::Skeleton *self) -> std::shared_ptr<const dart::dynamics::WholeBodyIK> { return self->getIK(); })
.def("createIK", [](dart::dynamics::Skeleton *self) -> const std::shared_ptr<dart::dynamics::WholeBodyIK> & { return self->createIK(); }, ::boost::python::return_value_policy<boost::python::copy_const_reference >())
.def("clearIK", [](dart::dynamics::Skeleton *self) -> void { return self->clearIK(); })
.def("getNumMarkers", [](const dart::dynamics::Skeleton *self) -> std::size_t { return self->getNumMarkers(); })
.def("getMarker", [](dart::dynamics::Skeleton *self, std::size_t index) -> dart::dynamics::Marker * { return self->getMarker(index); }, ::boost::python::return_value_policy<boost::python::reference_existing_object >(), (::boost::python::arg("index")))
.def("getNumMarkers", [](const dart::dynamics::Skeleton *self, std::size_t treeIndex) -> std::size_t { return self->getNumMarkers(treeIndex); }, (::boost::python::arg("treeIndex")))
.def("getMarker", [](dart::dynamics::Skeleton *self, std::size_t treeIndex, std::size_t nodeIndex) -> dart::dynamics::Marker * { return self->getMarker(treeIndex, nodeIndex); }, ::boost::python::return_value_policy<boost::python::reference_existing_object >(), (::boost::python::arg("treeIndex"), ::boost::python::arg("nodeIndex")))
.def("getMarker", [](dart::dynamics::Skeleton *self, const std::string & name) -> dart::dynamics::Marker * { return self->getMarker(name); }, ::boost::python::return_value_policy<boost::python::reference_existing_object >(), (::boost::python::arg("name")))
.def("getNumShapeNodes", [](const dart::dynamics::Skeleton *self) -> std::size_t { return self->getNumShapeNodes(); })
.def("getShapeNode", [](dart::dynamics::Skeleton *self, std::size_t index) -> dart::dynamics::ShapeNode * { return self->getShapeNode(index); }, ::boost::python::return_value_policy<boost::python::return_by_smart_ptr<dart::dynamics::ShapeNodePtr> >(), (::boost::python::arg("index")))
.def("getNumShapeNodes", [](const dart::dynamics::Skeleton *self, std::size_t treeIndex) -> std::size_t { return self->getNumShapeNodes(treeIndex); }, (::boost::python::arg("treeIndex")))
.def("getShapeNode", [](dart::dynamics::Skeleton *self, std::size_t treeIndex, std::size_t nodeIndex) -> dart::dynamics::ShapeNode * { return self->getShapeNode(treeIndex, nodeIndex); }, ::boost::python::return_value_policy<boost::python::return_by_smart_ptr<dart::dynamics::ShapeNodePtr> >(), (::boost::python::arg("treeIndex"), ::boost::python::arg("nodeIndex")))
.def("getShapeNode", [](dart::dynamics::Skeleton *self, const std::string & name) -> dart::dynamics::ShapeNode * { return self->getShapeNode(name); }, ::boost::python::return_value_policy<boost::python::return_by_smart_ptr<dart::dynamics::ShapeNodePtr> >(), (::boost::python::arg("name")))
.def("getNumEndEffectors", [](const dart::dynamics::Skeleton *self) -> std::size_t { return self->getNumEndEffectors(); })
.def("getEndEffector", [](dart::dynamics::Skeleton *self, std::size_t index) -> dart::dynamics::EndEffector * { return self->getEndEffector(index); }, ::boost::python::return_value_policy<boost::python::return_by_smart_ptr<dart::dynamics::EndEffectorPtr> >(), (::boost::python::arg("index")))
.def("getNumEndEffectors", [](const dart::dynamics::Skeleton *self, std::size_t treeIndex) -> std::size_t { return self->getNumEndEffectors(treeIndex); }, (::boost::python::arg("treeIndex")))
.def("getEndEffector", [](dart::dynamics::Skeleton *self, std::size_t treeIndex, std::size_t nodeIndex) -> dart::dynamics::EndEffector * { return self->getEndEffector(treeIndex, nodeIndex); }, ::boost::python::return_value_policy<boost::python::return_by_smart_ptr<dart::dynamics::EndEffectorPtr> >(), (::boost::python::arg("treeIndex"), ::boost::python::arg("nodeIndex")))
.def("getEndEffector", [](dart::dynamics::Skeleton *self, const std::string & name) -> dart::dynamics::EndEffector * { return self->getEndEffector(name); }, ::boost::python::return_value_policy<boost::python::return_by_smart_ptr<dart::dynamics::EndEffectorPtr> >(), (::boost::python::arg("name")))
.def("integratePositions", [](dart::dynamics::Skeleton *self, double _dt) -> void { return self->integratePositions(_dt); }, (::boost::python::arg("_dt")))
.def("integrateVelocities", [](dart::dynamics::Skeleton *self, double _dt) -> void { return self->integrateVelocities(_dt); }, (::boost::python::arg("_dt")))
.def("getPositionDifferences", [](const dart::dynamics::Skeleton *self, const Eigen::VectorXd & _q2, const Eigen::VectorXd & _q1) -> Eigen::VectorXd { return self->getPositionDifferences(_q2, _q1); }, (::boost::python::arg("_q2"), ::boost::python::arg("_q1")))
.def("getVelocityDifferences", [](const dart::dynamics::Skeleton *self, const Eigen::VectorXd & _dq2, const Eigen::VectorXd & _dq1) -> Eigen::VectorXd { return self->getVelocityDifferences(_dq2, _dq1); }, (::boost::python::arg("_dq2"), ::boost::python::arg("_dq1")))
.def("getSupportPolygon", [](const dart::dynamics::Skeleton *self) -> const dart::math::SupportPolygon & { return self->getSupportPolygon(); }, ::boost::python::return_value_policy<boost::python::copy_const_reference >())
.def("getSupportPolygon", [](const dart::dynamics::Skeleton *self, std::size_t _treeIdx) -> const dart::math::SupportPolygon & { return self->getSupportPolygon(_treeIdx); }, ::boost::python::return_value_policy<boost::python::copy_const_reference >(), (::boost::python::arg("_treeIdx")))
.def("getSupportIndices", [](const dart::dynamics::Skeleton *self) -> const std::vector<std::size_t> & { return self->getSupportIndices(); }, ::boost::python::return_value_policy<boost::python::copy_const_reference >())
.def("getSupportIndices", [](const dart::dynamics::Skeleton *self, std::size_t _treeIdx) -> const std::vector<std::size_t> & { return self->getSupportIndices(_treeIdx); }, ::boost::python::return_value_policy<boost::python::copy_const_reference >(), (::boost::python::arg("_treeIdx")))
.def("getSupportAxes", [](const dart::dynamics::Skeleton *self) -> const std::pair<Eigen::Vector3d, Eigen::Vector3d> & { return self->getSupportAxes(); }, ::boost::python::return_value_policy<boost::python::copy_const_reference >())
.def("getSupportAxes", [](const dart::dynamics::Skeleton *self, std::size_t _treeIdx) -> const std::pair<Eigen::Vector3d, Eigen::Vector3d> & { return self->getSupportAxes(_treeIdx); }, ::boost::python::return_value_policy<boost::python::copy_const_reference >(), (::boost::python::arg("_treeIdx")))
.def("getSupportCentroid", [](const dart::dynamics::Skeleton *self) -> const Eigen::Vector2d & { return self->getSupportCentroid(); }, ::boost::python::return_value_policy<boost::python::copy_const_reference >())
.def("getSupportCentroid", [](const dart::dynamics::Skeleton *self, std::size_t _treeIdx) -> const Eigen::Vector2d & { return self->getSupportCentroid(_treeIdx); }, ::boost::python::return_value_policy<boost::python::copy_const_reference >(), (::boost::python::arg("_treeIdx")))
.def("getSupportVersion", [](const dart::dynamics::Skeleton *self) -> std::size_t { return self->getSupportVersion(); })
.def("getSupportVersion", [](const dart::dynamics::Skeleton *self, std::size_t _treeIdx) -> std::size_t { return self->getSupportVersion(_treeIdx); }, (::boost::python::arg("_treeIdx")))
.def("computeForwardKinematics", [](dart::dynamics::Skeleton *self) -> void { return self->computeForwardKinematics(); })
.def("computeForwardKinematics", [](dart::dynamics::Skeleton *self, bool _updateTransforms) -> void { return self->computeForwardKinematics(_updateTransforms); }, (::boost::python::arg("_updateTransforms")))
.def("computeForwardKinematics", [](dart::dynamics::Skeleton *self, bool _updateTransforms, bool _updateVels) -> void { return self->computeForwardKinematics(_updateTransforms, _updateVels); }, (::boost::python::arg("_updateTransforms"), ::boost::python::arg("_updateVels")))
.def("computeForwardKinematics", [](dart::dynamics::Skeleton *self, bool _updateTransforms, bool _updateVels, bool _updateAccs) -> void { return self->computeForwardKinematics(_updateTransforms, _updateVels, _updateAccs); }, (::boost::python::arg("_updateTransforms"), ::boost::python::arg("_updateVels"), ::boost::python::arg("_updateAccs")))
.def("computeForwardDynamics", [](dart::dynamics::Skeleton *self) -> void { return self->computeForwardDynamics(); })
.def("computeInverseDynamics", [](dart::dynamics::Skeleton *self) -> void { return self->computeInverseDynamics(); })
.def("computeInverseDynamics", [](dart::dynamics::Skeleton *self, bool _withExternalForces) -> void { return self->computeInverseDynamics(_withExternalForces); }, (::boost::python::arg("_withExternalForces")))
.def("computeInverseDynamics", [](dart::dynamics::Skeleton *self, bool _withExternalForces, bool _withDampingForces) -> void { return self->computeInverseDynamics(_withExternalForces, _withDampingForces); }, (::boost::python::arg("_withExternalForces"), ::boost::python::arg("_withDampingForces")))
.def("computeInverseDynamics", [](dart::dynamics::Skeleton *self, bool _withExternalForces, bool _withDampingForces, bool _withSpringForces) -> void { return self->computeInverseDynamics(_withExternalForces, _withDampingForces, _withSpringForces); }, (::boost::python::arg("_withExternalForces"), ::boost::python::arg("_withDampingForces"), ::boost::python::arg("_withSpringForces")))
.def("clearConstraintImpulses", [](dart::dynamics::Skeleton *self) -> void { return self->clearConstraintImpulses(); })
.def("updateBiasImpulse", [](dart::dynamics::Skeleton *self, dart::dynamics::BodyNode * _bodyNode) -> void { return self->updateBiasImpulse(_bodyNode); }, (::boost::python::arg("_bodyNode")))
.def("updateBiasImpulse", [](dart::dynamics::Skeleton *self, dart::dynamics::BodyNode * _bodyNode, const Eigen::Vector6d & _imp) -> void { return self->updateBiasImpulse(_bodyNode, _imp); }, (::boost::python::arg("_bodyNode"), ::boost::python::arg("_imp")))
.def("updateBiasImpulse", [](dart::dynamics::Skeleton *self, dart::dynamics::BodyNode * _bodyNode1, const Eigen::Vector6d & _imp1, dart::dynamics::BodyNode * _bodyNode2, const Eigen::Vector6d & _imp2) -> void { return self->updateBiasImpulse(_bodyNode1, _imp1, _bodyNode2, _imp2); }, (::boost::python::arg("_bodyNode1"), ::boost::python::arg("_imp1"), ::boost::python::arg("_bodyNode2"), ::boost::python::arg("_imp2")))
.def("updateBiasImpulse", [](dart::dynamics::Skeleton *self, dart::dynamics::SoftBodyNode * _softBodyNode, dart::dynamics::PointMass * _pointMass, const Eigen::Vector3d & _imp) -> void { return self->updateBiasImpulse(_softBodyNode, _pointMass, _imp); }, (::boost::python::arg("_softBodyNode"), ::boost::python::arg("_pointMass"), ::boost::python::arg("_imp")))
.def("updateVelocityChange", [](dart::dynamics::Skeleton *self) -> void { return self->updateVelocityChange(); })
.def("setImpulseApplied", [](dart::dynamics::Skeleton *self, bool _val) -> void { return self->setImpulseApplied(_val); }, (::boost::python::arg("_val")))
.def("isImpulseApplied", [](const dart::dynamics::Skeleton *self) -> bool { return self->isImpulseApplied(); })
.def("computeImpulseForwardDynamics", [](dart::dynamics::Skeleton *self) -> void { return self->computeImpulseForwardDynamics(); })
.def("getJacobian", [](const dart::dynamics::Skeleton *self, const dart::dynamics::JacobianNode * _node) -> dart::math::Jacobian { return self->getJacobian(_node); }, (::boost::python::arg("_node")))
.def("getJacobian", [](const dart::dynamics::Skeleton *self, const dart::dynamics::JacobianNode * _node, const dart::dynamics::Frame * _inCoordinatesOf) -> dart::math::Jacobian { return self->getJacobian(_node, _inCoordinatesOf); }, (::boost::python::arg("_node"), ::boost::python::arg("_inCoordinatesOf")))
.def("getJacobian", [](const dart::dynamics::Skeleton *self, const dart::dynamics::JacobianNode * _node, const Eigen::Vector3d & _localOffset) -> dart::math::Jacobian { return self->getJacobian(_node, _localOffset); }, (::boost::python::arg("_node"), ::boost::python::arg("_localOffset")))
.def("getJacobian", [](const dart::dynamics::Skeleton *self, const dart::dynamics::JacobianNode * _node, const Eigen::Vector3d & _localOffset, const dart::dynamics::Frame * _inCoordinatesOf) -> dart::math::Jacobian { return self->getJacobian(_node, _localOffset, _inCoordinatesOf); }, (::boost::python::arg("_node"), ::boost::python::arg("_localOffset"), ::boost::python::arg("_inCoordinatesOf")))
.def("getWorldJacobian", [](const dart::dynamics::Skeleton *self, const dart::dynamics::JacobianNode * _node) -> dart::math::Jacobian { return self->getWorldJacobian(_node); }, (::boost::python::arg("_node")))
.def("getWorldJacobian", [](const dart::dynamics::Skeleton *self, const dart::dynamics::JacobianNode * _node, const Eigen::Vector3d & _localOffset) -> dart::math::Jacobian { return self->getWorldJacobian(_node, _localOffset); }, (::boost::python::arg("_node"), ::boost::python::arg("_localOffset")))
.def("getLinearJacobian", [](const dart::dynamics::Skeleton *self, const dart::dynamics::JacobianNode * _node) -> dart::math::LinearJacobian { return self->getLinearJacobian(_node); }, (::boost::python::arg("_node")))
.def("getLinearJacobian", [](const dart::dynamics::Skeleton *self, const dart::dynamics::JacobianNode * _node, const dart::dynamics::Frame * _inCoordinatesOf) -> dart::math::LinearJacobian { return self->getLinearJacobian(_node, _inCoordinatesOf); }, (::boost::python::arg("_node"), ::boost::python::arg("_inCoordinatesOf")))
.def("getLinearJacobian", [](const dart::dynamics::Skeleton *self, const dart::dynamics::JacobianNode * _node, const Eigen::Vector3d & _localOffset) -> dart::math::LinearJacobian { return self->getLinearJacobian(_node, _localOffset); }, (::boost::python::arg("_node"), ::boost::python::arg("_localOffset")))
.def("getLinearJacobian", [](const dart::dynamics::Skeleton *self, const dart::dynamics::JacobianNode * _node, const Eigen::Vector3d & _localOffset, const dart::dynamics::Frame * _inCoordinatesOf) -> dart::math::LinearJacobian { return self->getLinearJacobian(_node, _localOffset, _inCoordinatesOf); }, (::boost::python::arg("_node"), ::boost::python::arg("_localOffset"), ::boost::python::arg("_inCoordinatesOf")))
.def("getAngularJacobian", [](const dart::dynamics::Skeleton *self, const dart::dynamics::JacobianNode * _node) -> dart::math::AngularJacobian { return self->getAngularJacobian(_node); }, (::boost::python::arg("_node")))
.def("getAngularJacobian", [](const dart::dynamics::Skeleton *self, const dart::dynamics::JacobianNode * _node, const dart::dynamics::Frame * _inCoordinatesOf) -> dart::math::AngularJacobian { return self->getAngularJacobian(_node, _inCoordinatesOf); }, (::boost::python::arg("_node"), ::boost::python::arg("_inCoordinatesOf")))
.def("getJacobianSpatialDeriv", [](const dart::dynamics::Skeleton *self, const dart::dynamics::JacobianNode * _node) -> dart::math::Jacobian { return self->getJacobianSpatialDeriv(_node); }, (::boost::python::arg("_node")))
.def("getJacobianSpatialDeriv", [](const dart::dynamics::Skeleton *self, const dart::dynamics::JacobianNode * _node, const dart::dynamics::Frame * _inCoordinatesOf) -> dart::math::Jacobian { return self->getJacobianSpatialDeriv(_node, _inCoordinatesOf); }, (::boost::python::arg("_node"), ::boost::python::arg("_inCoordinatesOf")))
.def("getJacobianSpatialDeriv", [](const dart::dynamics::Skeleton *self, const dart::dynamics::JacobianNode * _node, const Eigen::Vector3d & _localOffset) -> dart::math::Jacobian { return self->getJacobianSpatialDeriv(_node, _localOffset); }, (::boost::python::arg("_node"), ::boost::python::arg("_localOffset")))
.def("getJacobianSpatialDeriv", [](const dart::dynamics::Skeleton *self, const dart::dynamics::JacobianNode * _node, const Eigen::Vector3d & _localOffset, const dart::dynamics::Frame * _inCoordinatesOf) -> dart::math::Jacobian { return self->getJacobianSpatialDeriv(_node, _localOffset, _inCoordinatesOf); }, (::boost::python::arg("_node"), ::boost::python::arg("_localOffset"), ::boost::python::arg("_inCoordinatesOf")))
.def("getJacobianClassicDeriv", [](const dart::dynamics::Skeleton *self, const dart::dynamics::JacobianNode * _node) -> dart::math::Jacobian { return self->getJacobianClassicDeriv(_node); }, (::boost::python::arg("_node")))
.def("getJacobianClassicDeriv", [](const dart::dynamics::Skeleton *self, const dart::dynamics::JacobianNode * _node, const dart::dynamics::Frame * _inCoordinatesOf) -> dart::math::Jacobian { return self->getJacobianClassicDeriv(_node, _inCoordinatesOf); }, (::boost::python::arg("_node"), ::boost::python::arg("_inCoordinatesOf")))
.def("getJacobianClassicDeriv", [](const dart::dynamics::Skeleton *self, const dart::dynamics::JacobianNode * _node, const Eigen::Vector3d & _localOffset) -> dart::math::Jacobian { return self->getJacobianClassicDeriv(_node, _localOffset); }, (::boost::python::arg("_node"), ::boost::python::arg("_localOffset")))
.def("getJacobianClassicDeriv", [](const dart::dynamics::Skeleton *self, const dart::dynamics::JacobianNode * _node, const Eigen::Vector3d & _localOffset, const dart::dynamics::Frame * _inCoordinatesOf) -> dart::math::Jacobian { return self->getJacobianClassicDeriv(_node, _localOffset, _inCoordinatesOf); }, (::boost::python::arg("_node"), ::boost::python::arg("_localOffset"), ::boost::python::arg("_inCoordinatesOf")))
.def("getLinearJacobianDeriv", [](const dart::dynamics::Skeleton *self, const dart::dynamics::JacobianNode * _node) -> dart::math::LinearJacobian { return self->getLinearJacobianDeriv(_node); }, (::boost::python::arg("_node")))
.def("getLinearJacobianDeriv", [](const dart::dynamics::Skeleton *self, const dart::dynamics::JacobianNode * _node, const dart::dynamics::Frame * _inCoordinatesOf) -> dart::math::LinearJacobian { return self->getLinearJacobianDeriv(_node, _inCoordinatesOf); }, (::boost::python::arg("_node"), ::boost::python::arg("_inCoordinatesOf")))
.def("getLinearJacobianDeriv", [](const dart::dynamics::Skeleton *self, const dart::dynamics::JacobianNode * _node, const Eigen::Vector3d & _localOffset) -> dart::math::LinearJacobian { return self->getLinearJacobianDeriv(_node, _localOffset); }, (::boost::python::arg("_node"), ::boost::python::arg("_localOffset")))
.def("getLinearJacobianDeriv", [](const dart::dynamics::Skeleton *self, const dart::dynamics::JacobianNode * _node, const Eigen::Vector3d & _localOffset, const dart::dynamics::Frame * _inCoordinatesOf) -> dart::math::LinearJacobian { return self->getLinearJacobianDeriv(_node, _localOffset, _inCoordinatesOf); }, (::boost::python::arg("_node"), ::boost::python::arg("_localOffset"), ::boost::python::arg("_inCoordinatesOf")))
.def("getAngularJacobianDeriv", [](const dart::dynamics::Skeleton *self, const dart::dynamics::JacobianNode * _node) -> dart::math::AngularJacobian { return self->getAngularJacobianDeriv(_node); }, (::boost::python::arg("_node")))
.def("getAngularJacobianDeriv", [](const dart::dynamics::Skeleton *self, const dart::dynamics::JacobianNode * _node, const dart::dynamics::Frame * _inCoordinatesOf) -> dart::math::AngularJacobian { return self->getAngularJacobianDeriv(_node, _inCoordinatesOf); }, (::boost::python::arg("_node"), ::boost::python::arg("_inCoordinatesOf")))
.def("getMass", [](const dart::dynamics::Skeleton *self) -> double { return self->getMass(); })
.def("getMassMatrix", [](const dart::dynamics::Skeleton *self, std::size_t _treeIdx) -> const Eigen::MatrixXd & { return self->getMassMatrix(_treeIdx); }, ::boost::python::return_value_policy<boost::python::copy_const_reference >(), (::boost::python::arg("_treeIdx")))
.def("getMassMatrix", [](const dart::dynamics::Skeleton *self) -> const Eigen::MatrixXd & { return self->getMassMatrix(); }, ::boost::python::return_value_policy<boost::python::copy_const_reference >())
.def("getAugMassMatrix", [](const dart::dynamics::Skeleton *self, std::size_t _treeIdx) -> const Eigen::MatrixXd & { return self->getAugMassMatrix(_treeIdx); }, ::boost::python::return_value_policy<boost::python::copy_const_reference >(), (::boost::python::arg("_treeIdx")))
.def("getAugMassMatrix", [](const dart::dynamics::Skeleton *self) -> const Eigen::MatrixXd & { return self->getAugMassMatrix(); }, ::boost::python::return_value_policy<boost::python::copy_const_reference >())
.def("getInvMassMatrix", [](const dart::dynamics::Skeleton *self, std::size_t _treeIdx) -> const Eigen::MatrixXd & { return self->getInvMassMatrix(_treeIdx); }, ::boost::python::return_value_policy<boost::python::copy_const_reference >(), (::boost::python::arg("_treeIdx")))
.def("getInvMassMatrix", [](const dart::dynamics::Skeleton *self) -> const Eigen::MatrixXd & { return self->getInvMassMatrix(); }, ::boost::python::return_value_policy<boost::python::copy_const_reference >())
.def("getInvAugMassMatrix", [](const dart::dynamics::Skeleton *self, std::size_t _treeIdx) -> const Eigen::MatrixXd & { return self->getInvAugMassMatrix(_treeIdx); }, ::boost::python::return_value_policy<boost::python::copy_const_reference >(), (::boost::python::arg("_treeIdx")))
.def("getInvAugMassMatrix", [](const dart::dynamics::Skeleton *self) -> const Eigen::MatrixXd & { return self->getInvAugMassMatrix(); }, ::boost::python::return_value_policy<boost::python::copy_const_reference >())
.def("getCoriolisForces", [](const dart::dynamics::Skeleton *self, std::size_t _treeIdx) -> const Eigen::VectorXd & { return self->getCoriolisForces(_treeIdx); }, ::boost::python::return_value_policy<boost::python::copy_const_reference >(), (::boost::python::arg("_treeIdx")))
.def("getCoriolisForces", [](const dart::dynamics::Skeleton *self) -> const Eigen::VectorXd & { return self->getCoriolisForces(); }, ::boost::python::return_value_policy<boost::python::copy_const_reference >())
.def("getGravityForces", [](const dart::dynamics::Skeleton *self, std::size_t _treeIdx) -> const Eigen::VectorXd & { return self->getGravityForces(_treeIdx); }, ::boost::python::return_value_policy<boost::python::copy_const_reference >(), (::boost::python::arg("_treeIdx")))
.def("getGravityForces", [](const dart::dynamics::Skeleton *self) -> const Eigen::VectorXd & { return self->getGravityForces(); }, ::boost::python::return_value_policy<boost::python::copy_const_reference >())
.def("getCoriolisAndGravityForces", [](const dart::dynamics::Skeleton *self, std::size_t _treeIdx) -> const Eigen::VectorXd & { return self->getCoriolisAndGravityForces(_treeIdx); }, ::boost::python::return_value_policy<boost::python::copy_const_reference >(), (::boost::python::arg("_treeIdx")))
.def("getCoriolisAndGravityForces", [](const dart::dynamics::Skeleton *self) -> const Eigen::VectorXd & { return self->getCoriolisAndGravityForces(); }, ::boost::python::return_value_policy<boost::python::copy_const_reference >())
.def("getExternalForces", [](const dart::dynamics::Skeleton *self, std::size_t _treeIdx) -> const Eigen::VectorXd & { return self->getExternalForces(_treeIdx); }, ::boost::python::return_value_policy<boost::python::copy_const_reference >(), (::boost::python::arg("_treeIdx")))
.def("getExternalForces", [](const dart::dynamics::Skeleton *self) -> const Eigen::VectorXd & { return self->getExternalForces(); }, ::boost::python::return_value_policy<boost::python::copy_const_reference >())
.def("getConstraintForces", [](const dart::dynamics::Skeleton *self, std::size_t _treeIdx) -> const Eigen::VectorXd & { return self->getConstraintForces(_treeIdx); }, ::boost::python::return_value_policy<boost::python::copy_const_reference >(), (::boost::python::arg("_treeIdx")))
.def("getConstraintForces", [](const dart::dynamics::Skeleton *self) -> const Eigen::VectorXd & { return self->getConstraintForces(); }, ::boost::python::return_value_policy<boost::python::copy_const_reference >())
.def("clearExternalForces", [](dart::dynamics::Skeleton *self) -> void { return self->clearExternalForces(); })
.def("clearInternalForces", [](dart::dynamics::Skeleton *self) -> void { return self->clearInternalForces(); })
.def("notifyArticulatedInertiaUpdate", [](dart::dynamics::Skeleton *self, std::size_t _treeIdx) -> void { return self->notifyArticulatedInertiaUpdate(_treeIdx); }, (::boost::python::arg("_treeIdx")))
.def("dirtyArticulatedInertia", [](dart::dynamics::Skeleton *self, std::size_t _treeIdx) -> void { return self->dirtyArticulatedInertia(_treeIdx); }, (::boost::python::arg("_treeIdx")))
.def("notifySupportUpdate", [](dart::dynamics::Skeleton *self, std::size_t _treeIdx) -> void { return self->notifySupportUpdate(_treeIdx); }, (::boost::python::arg("_treeIdx")))
.def("dirtySupportPolygon", [](dart::dynamics::Skeleton *self, std::size_t _treeIdx) -> void { return self->dirtySupportPolygon(_treeIdx); }, (::boost::python::arg("_treeIdx")))
.def("computeKineticEnergy", [](const dart::dynamics::Skeleton *self) -> double { return self->computeKineticEnergy(); })
.def("computePotentialEnergy", [](const dart::dynamics::Skeleton *self) -> double { return self->computePotentialEnergy(); })
.def("clearCollidingBodies", [](dart::dynamics::Skeleton *self) -> void { return self->clearCollidingBodies(); })
.def("getCOM", [](const dart::dynamics::Skeleton *self) -> Eigen::Vector3d { return self->getCOM(); })
.def("getCOM", [](const dart::dynamics::Skeleton *self, const dart::dynamics::Frame * _withRespectTo) -> Eigen::Vector3d { return self->getCOM(_withRespectTo); }, (::boost::python::arg("_withRespectTo")))
.def("getCOMSpatialVelocity", [](const dart::dynamics::Skeleton *self) -> Eigen::Vector6d { return self->getCOMSpatialVelocity(); })
.def("getCOMSpatialVelocity", [](const dart::dynamics::Skeleton *self, const dart::dynamics::Frame * _relativeTo) -> Eigen::Vector6d { return self->getCOMSpatialVelocity(_relativeTo); }, (::boost::python::arg("_relativeTo")))
.def("getCOMSpatialVelocity", [](const dart::dynamics::Skeleton *self, const dart::dynamics::Frame * _relativeTo, const dart::dynamics::Frame * _inCoordinatesOf) -> Eigen::Vector6d { return self->getCOMSpatialVelocity(_relativeTo, _inCoordinatesOf); }, (::boost::python::arg("_relativeTo"), ::boost::python::arg("_inCoordinatesOf")))
.def("getCOMLinearVelocity", [](const dart::dynamics::Skeleton *self) -> Eigen::Vector3d { return self->getCOMLinearVelocity(); })
.def("getCOMLinearVelocity", [](const dart::dynamics::Skeleton *self, const dart::dynamics::Frame * _relativeTo) -> Eigen::Vector3d { return self->getCOMLinearVelocity(_relativeTo); }, (::boost::python::arg("_relativeTo")))
.def("getCOMLinearVelocity", [](const dart::dynamics::Skeleton *self, const dart::dynamics::Frame * _relativeTo, const dart::dynamics::Frame * _inCoordinatesOf) -> Eigen::Vector3d { return self->getCOMLinearVelocity(_relativeTo, _inCoordinatesOf); }, (::boost::python::arg("_relativeTo"), ::boost::python::arg("_inCoordinatesOf")))
.def("getCOMSpatialAcceleration", [](const dart::dynamics::Skeleton *self) -> Eigen::Vector6d { return self->getCOMSpatialAcceleration(); })
.def("getCOMSpatialAcceleration", [](const dart::dynamics::Skeleton *self, const dart::dynamics::Frame * _relativeTo) -> Eigen::Vector6d { return self->getCOMSpatialAcceleration(_relativeTo); }, (::boost::python::arg("_relativeTo")))
.def("getCOMSpatialAcceleration", [](const dart::dynamics::Skeleton *self, const dart::dynamics::Frame * _relativeTo, const dart::dynamics::Frame * _inCoordinatesOf) -> Eigen::Vector6d { return self->getCOMSpatialAcceleration(_relativeTo, _inCoordinatesOf); }, (::boost::python::arg("_relativeTo"), ::boost::python::arg("_inCoordinatesOf")))
.def("getCOMLinearAcceleration", [](const dart::dynamics::Skeleton *self) -> Eigen::Vector3d { return self->getCOMLinearAcceleration(); })
.def("getCOMLinearAcceleration", [](const dart::dynamics::Skeleton *self, const dart::dynamics::Frame * _relativeTo) -> Eigen::Vector3d { return self->getCOMLinearAcceleration(_relativeTo); }, (::boost::python::arg("_relativeTo")))
.def("getCOMLinearAcceleration", [](const dart::dynamics::Skeleton *self, const dart::dynamics::Frame * _relativeTo, const dart::dynamics::Frame * _inCoordinatesOf) -> Eigen::Vector3d { return self->getCOMLinearAcceleration(_relativeTo, _inCoordinatesOf); }, (::boost::python::arg("_relativeTo"), ::boost::python::arg("_inCoordinatesOf")))
.def("getCOMJacobian", [](const dart::dynamics::Skeleton *self) -> dart::math::Jacobian { return self->getCOMJacobian(); })
.def("getCOMJacobian", [](const dart::dynamics::Skeleton *self, const dart::dynamics::Frame * _inCoordinatesOf) -> dart::math::Jacobian { return self->getCOMJacobian(_inCoordinatesOf); }, (::boost::python::arg("_inCoordinatesOf")))
.def("getCOMLinearJacobian", [](const dart::dynamics::Skeleton *self) -> dart::math::LinearJacobian { return self->getCOMLinearJacobian(); })
.def("getCOMLinearJacobian", [](const dart::dynamics::Skeleton *self, const dart::dynamics::Frame * _inCoordinatesOf) -> dart::math::LinearJacobian { return self->getCOMLinearJacobian(_inCoordinatesOf); }, (::boost::python::arg("_inCoordinatesOf")))
.def("getCOMJacobianSpatialDeriv", [](const dart::dynamics::Skeleton *self) -> dart::math::Jacobian { return self->getCOMJacobianSpatialDeriv(); })
.def("getCOMJacobianSpatialDeriv", [](const dart::dynamics::Skeleton *self, const dart::dynamics::Frame * _inCoordinatesOf) -> dart::math::Jacobian { return self->getCOMJacobianSpatialDeriv(_inCoordinatesOf); }, (::boost::python::arg("_inCoordinatesOf")))
.def("getCOMLinearJacobianDeriv", [](const dart::dynamics::Skeleton *self) -> dart::math::LinearJacobian { return self->getCOMLinearJacobianDeriv(); })
.def("getCOMLinearJacobianDeriv", [](const dart::dynamics::Skeleton *self, const dart::dynamics::Frame * _inCoordinatesOf) -> dart::math::LinearJacobian { return self->getCOMLinearJacobianDeriv(_inCoordinatesOf); }, (::boost::python::arg("_inCoordinatesOf")))
.def("resetUnion", [](dart::dynamics::Skeleton *self) -> void { return self->resetUnion(); })
.def("create", []() -> dart::dynamics::SkeletonPtr { return dart::dynamics::Skeleton::create(); })
.def("create", [](const std::string & _name) -> dart::dynamics::SkeletonPtr { return dart::dynamics::Skeleton::create(_name); }, (::boost::python::arg("_name")))
.def("create", [](const dart::dynamics::Skeleton::AspectPropertiesData & properties) -> dart::dynamics::SkeletonPtr { return dart::dynamics::Skeleton::create(properties); }, (::boost::python::arg("properties")))
.staticmethod("create")
.def_readwrite("mUnionRootSkeleton", &dart::dynamics::Skeleton::mUnionRootSkeleton)
.def_readwrite("mUnionSize", &dart::dynamics::Skeleton::mUnionSize)
.def_readwrite("mUnionIndex", &dart::dynamics::Skeleton::mUnionIndex)
;
}

/* footer */
